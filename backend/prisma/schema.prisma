/// Prisma schema for Nerdy Sessions backend
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model news_articles {
  article_id    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stock_symbol  String?    @db.VarChar(10) // nullable: news may not be linked to a stock
  headline      String
  url           String
  publish_date  DateTime?  @default(now()) @db.Timestamp(6) // nullable: may be missing publish date

  stocks        stocks?    @relation(fields: [stock_symbol], references: [symbol], onDelete: Cascade, onUpdate: NoAction)
}

model stocks {
  symbol            String             @id @db.VarChar(10)
  name              String             @db.VarChar(255)
  sector            String?            @db.VarChar(100)
  ai_impact_score   Int?
  last_updated      DateTime?          @default(now()) @db.Timestamp(6)

  news_articles     news_articles[]
  trade_history     trade_history[]
  user_portfolios   user_portfolios[]
}

model trade_history {
  trade_id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?    @db.Uuid // nullable: trade may not be linked to a user
  stock_symbol   String?    @db.VarChar(10) // nullable: trade may not be linked to a stock
  shares         Int
  trade_price    Decimal    @db.Decimal(15, 4)
  executed_at    DateTime?  @default(now()) @db.Timestamp(6)

  stocks         stocks?    @relation(fields: [stock_symbol], references: [symbol], onDelete: Cascade, onUpdate: NoAction)
  users          users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_portfolios {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?    @db.Uuid // nullable: portfolio may not be linked to a user
  stock_symbol   String?    @db.VarChar(10) // nullable: portfolio may not be linked to a stock
  shares         Int
  cost_basis     Decimal    @db.Decimal(15, 4)
  created_at     DateTime?  @default(now()) @db.Timestamp(6)

  stocks         stocks?    @relation(fields: [stock_symbol], references: [symbol], onDelete: Cascade, onUpdate: NoAction)
  users          users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Enum for authentication providers
enum AuthProvider {
  local
  google
  github
  microsoft
}

model users {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String             @unique @db.VarChar(50) // Keep username for now, might deprecate later if email is primary identifier
  email             String             @unique
  hashed_password   String?            // Nullable for social logins
  emailVerified     Boolean            @default(false)
  verificationToken String?            @unique
  resetToken        String?            @unique
  resetTokenExpiry  DateTime?
  provider          AuthProvider       @default(local)
  created_at        DateTime?          @default(now()) @db.Timestamp(6)

  trade_history     trade_history[]
  mockup_images     mockup_images[]
  mockup_websites   mockup_websites[]
  user_portfolios   user_portfolios[]
}
model mockup_images {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename      String
  original_name String
  url           String
  description   String?
  uploaded_at   DateTime  @default(now()) @db.Timestamp(6)
  uploaded_by   String?   @db.Uuid

  users         users?    @relation(fields: [uploaded_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model mockup_websites {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url           String
  description   String?
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  uploaded_by   String?   @db.Uuid

  users         users?    @relation(fields: [uploaded_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
}
